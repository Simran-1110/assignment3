plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'pmd'
	id 'checkstyle'
}

group = 'com.nuclei'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'javax.persistence:javax.persistence-api:2.2'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'com.h2database:h2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testImplementation 'org.mockito:mockito-core:5.11.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

apply plugin: 'checkstyle'

tasks.withType(Checkstyle) {
	showViolations true
	exclude '**/mock/**/*'
}
checkstyle {
	toolVersion '8.11'
	sourceSets = [project.sourceSets.main]
}
tasks.withType(Checkstyle).each { checkstyleTask ->
	checkstyleTask.doLast {
		reports.all { report ->
			def outputFile = report.destination
			if (outputFile.exists() && outputFile.text.contains("<error ")) {
				throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
			}
		}
	}
}

apply plugin: 'pmd'

pmd {
	toolVersion = '6.26.0'
	ruleSets = []
	ruleSetFiles = files("$rootDir/config/pmd/ruleset.xml")
}

tasks.named('test') {
	useJUnitPlatform()
}

